static_resources:
  listeners:
  - name: listener_grpc
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8001
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_grpc
          codec_type: AUTO
          route_config:
            name: local_route_grpc
            virtual_hosts:
            - name: backend_grpc
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: triton_grpc_service
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                    local path = request_handle:headers():get(":path")
                    local contentType = request_handle:headers():get("content-type")

                    -- Check if the request is the specific gRPC type we're interested in
                    if path == "/inference.GRPCInferenceService/RepositoryIndex" and contentType == "application/grpc" then
                        local prometheus_query = 'max(avg by (model) (irate(nv_inference_queue_duration_us{pod=~\'triton-.*\'}[4m:2m])/(1000 * (1 + irate(nv_inference_request_success{pod=~\'triton-.*\'}[4m:2m])))))'
                        local encoded_query = encode_query(prometheus_query)
                        local metric_threshold = 400

                        local headers, body = request_handle:httpCall(
                            "prometheus_cluster",
                            {
                                [":method"] = "GET",
                                [":path"] = "/api/v1/query?query=" .. encoded_query,
                                [":authority"] = "prometheus-service.cms.geddes.rcac.purdue.edu"
                            },
                            "",
                            5000
                        )

                        if not body or body == "" then
                            request_handle:logErr("Prometheus could not be reached or returned no data.")
                            return
                        end

                        -- Pattern matching to extract metric value from the JSON string
                        local metric_value_str = string.match(body, '"value":%[%d+%.%d+,"([%d%.]+)"%]')
                        if metric_value_str then
                            local metric_value = tonumber(metric_value_str)
                            if metric_value > metric_threshold then
                                request_handle:logInfo("Metric value " .. tostring(metric_value) .. " exceeds threshold " .. tostring(metric_threshold) .. ". Modifying response.")
                                request_handle:respond(
                                    {[":status"] = "200"},
                                    '[]'  -- This represents an empty list in JSON
                                )
                            else
                                request_handle:logInfo("Metric value " .. tostring(metric_value) .. " is below the threshold " .. tostring(metric_threshold) .. ". Proceeding with normal routing.")
                            end
                        else
                            request_handle:logErr("Failed to parse metric value from Prometheus response.")
                        end
                    end
                end

                function encode_query(query)
                    return query:gsub("([^%w _%%%-%.~])", function(c)
                        return string.format("%%%02X", string.byte(c))
                    end):gsub(" ", "+")
                end


          - name: envoy.filters.http.router
          http2_protocol_options: {}

  clusters:
  - name: prometheus_cluster
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: prometheus_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: prometheus-service.cms.geddes.rcac.purdue.edu
                port_value: 8080
  - name: triton_grpc_service
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: triton_grpc_service
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: triton-run2  # Assuming this is your service address
                    port_value: 8001

