{{- range .Values.servers }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .triton.name }}
spec:
  replicas: {{ .triton.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .triton.name }}
  template:
    metadata:
      labels:
        app: {{ .triton.name }}
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: triton-server
        image: {{ .triton.image }}
        resources:
          {{ toYaml .triton.resources | nindent 10 }}
        ports:
        {{- range $.Values.common.tritonService.ports }}
        - name: {{ .name }}
          containerPort: {{ .port }}
          protocol: {{ .protocol }}
        {{- end }}
        volumeMounts:
          - name: model-repository
            mountPath: {{ .triton.modelRepository.mountPath }}
            {{- if .triton.modelRepository.subPath }}
            subPath: {{ .triton.modelRepository.subPath }}
            {{- end }}
            mountPropagation: HostToContainer
            readOnly: true
        command: {{ toYaml .triton.command | nindent 10 }}
        args:  {{ toYaml .triton.args | nindent 10 }}
        startupProbe:
          periodSeconds: 10
          failureThreshold: 12
          httpGet:
            path: /v2/health/ready
            port: http
        readinessProbe:
          exec:
            command: ["/bin/sh", "-c", "curl -sf http://localhost:8000/v2/health/ready > /dev/null && [ ! -f /tmp/shutdown ]"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "touch /tmp/shutdown; sleep 60"]
{{- if eq .triton.modelRepository.storageType "nfs" }}
      volumes:
      - name: model-repository
        nfs:
          server: {{ .triton.modelRepository.nfs.server }}
          path: {{ .triton.modelRepository.nfs.path }}
{{- else if eq .triton.modelRepository.storageType "pvc" }}
      volumes:
      - name: model-repository
        persistentVolumeClaim:
          claimName: {{ .triton.modelRepository.pvc.claimName }}
{{- else if eq .triton.modelRepository.storageType "cvmfs" }}
      volumes:
      - name: model-repository
        hostPath: 
          path: /cvmfs
{{- else if eq .triton.modelRepository.storageType "cvmfs-pvc" }}
      volumes:
      - name: model-repository
        persistentVolumeClaim:
          claimName: cvmfs
          readOnly: true
{{- else if eq .triton.modelRepository.storageType "s3" }}
    #   initContainers:
    #   - name: s3-sync
    #     image: appropriate/curl # Placeholder image
    #     command: ['sh', '-c', 'echo Syncing data from S3;']
    #     volumeMounts:
    #     - name: model-repository
    #       mountPath: "/s3-data"
      volumes:
      - name: model-repository
        emptyDir: {}
{{- end }}

{{- if .triton.affinity }}
      affinity: {{ toYaml .triton.affinity | nindent 8}}
{{- end }}

{{- if $.Values.common.nodeSelector }}
      nodeSelector:
{{ toYaml $.Values.common.nodeSelector | nindent 8 }}
{{- end }}
{{- if $.Values.common.tolerations }}
      tolerations:
{{ toYaml $.Values.common.tolerations | nindent 8 }}
{{- end }}
      restartPolicy: Always
---
{{- end }}
